from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
from texts import *
import re

from keyboards import *
from sql_query import *
from dotenv import load_dotenv
import os

load_dotenv()
token = os.getenv('token_test')
proxy_url = os.getenv('proxy_url')

storage = MemoryStorage()
bot = Bot(token=token, proxy=proxy_url)
dp = Dispatcher(storage=storage)

name = ''


class Client(StatesGroup):
    calc_price = State()
    cours = State()
    order_kat = State()
    picture = State()
    link = State()
    size = State()
    price = State()
    result = State()
    done = State()
    mail = State()
    number_propt = State()
    bank_propt = State()


@dp.message(Command("start"), StateFilter('*'))
async def start_command(message: Message, state: FSMContext):
    photo = FSInputFile("media/pumba_pic.jpg")
    await state.clear()
    try:
        await bot.send_photo(chat_id=message.chat.id,
                             photo=photo,
                             caption=f'{start_message}',
                             parse_mode='HTML',
                             reply_markup=get_ikb_start())
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ /start: {e.__class__.__name__}: {e}')


@dp.callback_query(StateFilter('*'), F.data == 'home')
async def come_home(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    photo = FSInputFile("media/pumba_pic.jpg")
    await bot.send_photo(chat_id=callback.message.chat.id,
                         photo=photo,
                         caption=f'{start_message}',
                         parse_mode='HTML',
                         reply_markup=get_ikb_start())


@dp.callback_query(F.data == 'make_order')
async def make_order(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(calc_text,
                                  reply_markup=get_ikb_kat())
    await state.set_state(Client.order_kat)


@dp.callback_query(F.data == 'instructions')
async def instructions(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
                                  reply_markup=ikb_instruction())


@dp.callback_query(F.data == 'log_acc')
async def log_acc(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    file1 = FSInputFile('media/log_acc_1.jpg')
    file2 = FSInputFile('media/log_acc_2.jpg')
    file3 = FSInputFile('media/log_acc_3.jpg')
    file4 = FSInputFile('media/log_acc_4.jpg')
    photos = [
        InputMediaPhoto(media=file1, caption=log_acc_text, parse_mode='HTML'),
        InputMediaPhoto(media=file2),
        InputMediaPhoto(media=file3),
        InputMediaPhoto(media=file4)
    ]
    await bot.send_media_group(chat_id=callback.message.chat.id,
                               media=photos)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
                                  reply_markup=ikb_instruction())


@dp.callback_query(F.data == 'guide')
async def quide(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    file1 = FSInputFile('media/guide_1.jpg')
    file2 = FSInputFile('media/guide_2.jpg')
    file3 = FSInputFile('media/guide_3.jpg')
    file4 = FSInputFile('media/guide_4.jpg')
    file5 = FSInputFile('media/guide_5.jpg')
    photos = [
        InputMediaPhoto(media=file1, caption=guide_text, parse_mode='HTML'),
        InputMediaPhoto(media=file2),
        InputMediaPhoto(media=file3),
        InputMediaPhoto(media=file4),
        InputMediaPhoto(media=file5)
    ]
    await bot.send_media_group(chat_id=callback.message.chat.id,
                               media=photos)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
                                  reply_markup=ikb_instruction())


@dp.callback_query(lambda c: c.data.startswith("calc_"), StateFilter(Client.order_kat))
async def order_kat(callback: CallbackQuery, state: FSMContext):
    photo = FSInputFile("media/example.PNG")
    await state.update_data(kat=callback.data[5:])
    await callback.message.delete()
    await callback.bot.send_photo(chat_id=callback.message.chat.id,
                                  photo=photo,
                                  caption=f'üñºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ',
                                  parse_mode='HTML',
                                  reply_markup=ikb_come_home())
    await callback.answer()
    await state.set_state(Client.picture)


@dp.message(StateFilter(Client.picture))
async def picture(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.",)
        return
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(photo_id=file_id)
    await message.answer(text="<b>üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä</b>",
                         reply_markup=ikb_where_link(),
                         parse_mode="HTML")
    await state.set_state(Client.link)


@dp.message(StateFilter(Client.link))
async def link(message: Message, state: FSMContext):
    if 'https://dw4.co' in message.text:
        match = re.search(r'https?://\S+', message.text)
        await state.update_data(link=match.group())
        await message.answer(text='üìè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –æ–¥–µ–∂–¥—ã –∏ –æ–±—É–≤–∏).\n\n'
                             '–ù–∞–ø—Ä–∏–º–µ—Ä: 42',
                             parse_mode='HTML',
                             reply_markup=ikb_come_home())
        await state.set_state(Client.size)
    else:
        await message.answer('–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª–π—É—Å—Ç–∞, —Å—Å—ã–ª–∫—É!')


@dp.message(StateFilter(Client.size))
async def size(message: Message, state: FSMContext):
    if message.text.isdigit() or '.' in message.text or ',' in message.text:
        await state.update_data(size=message.text)
        await message.answer(text='‚ùï–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –Æ–∞–Ω—è—Ö:',
                             parse_mode='HTML',
                             reply_markup=ikb_come_home())
        await state.set_state(Client.price)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–º–µ—Ä!')


@dp.message(StateFilter(Client.price))
async def price(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(price=message.text)
        data = await state.get_data()
        price = int(data.get('price'))
        cours = get_cours()[0]
        comission = get_price_comission(data.get('kat'))[0]
        res = int(price * cours + 1000 + comission)
        await bot.send_photo(chat_id=message.chat.id,
                             caption=f'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {data.get("link")}\n'
                                     f'üß© –†–∞–∑–º–µ—Ä: {data.get("size")}\n'
                                     f'üí¥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –Æ–∞–Ω—è—Ö: {data.get("price")}¬•\n'
                                     f'üí≥ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {res}‚ÇΩ\n\n'
                                     f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö!',
                             photo=data.get('photo_id'),
                             parse_mode='HTML',
                             reply_markup=ikb_done()
                             )
        await state.set_state(Client.done)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å!')


@dp.callback_query(StateFilter(Client.done))
async def send_mail_info(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(mail_text,
                                  reply_markup=ikb_come_home())
    await state.set_state(Client.mail)


@dp.message(StateFilter(Client.mail))
async def result(message: Message, state: FSMContext):
    if message.text.count('\n') >= 6:
        await message.answer(f'<b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n\n'
                             f'–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã!\n'
                             f'(–ö—É—Ä—Å –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)',
                             reply_markup=ikb_come_home(),
                             parse_mode='HTML')
        data = await state.get_data()
        price = int(data.get('price'))
        cours = get_cours()[0]
        comission = get_price_comission(data.get('kat'))[0]
        res = int(price * cours + 1000 + comission)
        order_id = await add_order([message.from_user.id, message.from_user.username, res, price, comission])
        await bot.send_photo(chat_id=1006103801,
                       caption=f'üôé‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç: @{message.from_user.username}\n'
                               f'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {data.get("link")}\n'
                               f'üß© –†–∞–∑–º–µ—Ä: {data.get("size")}\n'
                               f'üí¥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –Æ–∞–Ω—è—Ö: {data.get("price")}¬•\n'
                               f'üí≥ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {res}‚ÇΩ\n'
                               f'üìä –ö—É—Ä—Å: {cours}\n\n'
                               f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ:\n'
                               f'{message.text}',
                       photo=data.get('photo_id'),
                       reply_markup=ikb_sign(order_id),
                       parse_mode='HTML')
        # await bot.send_photo(chat_id=6773782194,
        #                      caption=f'üôé‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç: @{message.from_user.username}\n'
        #                              f'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {data.get("link")}\n'
        #                              f'üß© –†–∞–∑–º–µ—Ä: {data.get("size")}\n'
        #                              f'üí¥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –Æ–∞–Ω—è—Ö: {data.get("price")}¬•\n'
        #                              f'üí≥ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {res}‚ÇΩ\n'
        #                              f'üìä –ö—É—Ä—Å: {cours}\n\n'
        #                              f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ:\n'
        #                              f'{message.text}',
        #                      photo=data.get('photo_id'),
        #                      reply_markup=ikb_sign(order_id),
        #                      parse_mode='HTML')
        await state.clear()
    else:
        await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@dp.callback_query(lambda c: c.data.startswith("id_"))
async def order_kat(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_info = await get_order_by_id(callback.data[3:])
    id = await get_current_propts_id()
    data = await get_payment_data_by_id(id)
    price = await get_sum_y(callback.data[3:])
    cours = get_cours()[0]
    res = int(int(price[0]) * cours + int(price[1]) + 1000)
    await callback.message.answer(f'–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n'
                                  f'‚Äçüôé‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç: @{user_info[2]}\n'
                                  f'üí∏ –°—É–º–º–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è —É –∫–ª–∏–µ–Ω—Ç–∞: {user_info[3]}‚ÇΩ\n'
                                  f'üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {res}‚ÇΩ')
    await bot.send_message(chat_id=int(user_info[1]),
                           text='üö® –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞, –±—É–¥—å—Ç–µ –ø—Ä–µ–¥–µ–ª—å–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –æ–ø–ª–∞—Ç—ã, —Å–≤–µ—Ä—è–π—Ç–µ –°–£–ú–ú–£, –ò–ú–Ø –∏ –ë–ê–ù–ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è!')
    await bot.send_message(chat_id=int(user_info[1]),
                           text=f'‚úÖ <b>–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b>\n\n'
                                f'–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n'
                                f'<code>üì≤ {data[1]}</code>\n'
                                f'üè¶ {data[0]}\n'
                                f'üë§ –§—ë–¥–æ—Ä –ü.\n\n'
                                f'–ö –æ–ø–ª–∞—Ç–µ: <b>{res}‚ÇΩ</b>\n'
                                f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
                           parse_mode='HTML')


@dp.callback_query(F.data == 'often_quest')
async def quest(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç —É–∂–µ –∂–¥—ë—Ç –≤–∞—Å –∑–¥–µ—Å—å.',
                                  reply_markup=ikb_often_question())


@dp.callback_query(F.data == 'time_delivery')
async def quest_1(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 3 –¥–æ 5 –Ω–µ–¥–µ–ª—å —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞ '
                                  '–Ω–∞ —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ. –°—Ä–æ–∫ –º–æ–∂–µ—Ç –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞.',
                                  reply_markup=ikb_come_quest())


@dp.callback_query(F.data == 'trans_comp')
async def quest_2(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–ü–æ –†–æ—Å—Å–∏–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ü–æ—á—Ç—É –†–æ—Å—Å–∏–∏.',
                                  reply_markup=ikb_come_quest())


@dp.callback_query(F.data == 'track_order')
async def quest_3(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ '
                                  '–†–æ—Å—Å–∏–∏, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ SMS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.',
                                  reply_markup=ikb_come_quest())


@dp.callback_query(F.data == 'calc')
async def calc_price(callback: CallbackQuery):
    await callback.message.delete()
    await callback.bot.send_message(chat_id=callback.from_user.id,
                                    text=calc_text,
                                    reply_markup=get_ikb_kat())
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("calc_"))
async def res_calc(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    global name
    name = callback.data
    await callback.bot.send_message(chat_id=callback.from_user.id,
                                    text='–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:')
    await state.set_state(Client.calc_price)


@dp.message(StateFilter(Client.calc_price))
async def res_calc2(message: Message, state: FSMContext):
    global name
    if message.text.isdigit():
        price = int(message.text)
        cours = get_cours()[0]
        comission = get_price_comission(name[5:])[0]
        res = int(price * cours + 1000 + comission)
        await message.bot.send_message(chat_id=message.from_user.id,
                                       text=f'üí≥ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: <b>{res} —Ä—É–±–ª–µ–π</b>\n\n'
                                            f'üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{comission} —Ä—É–±–ª–µ–π</b>\n'
                                            f'üí∏ –ö–æ–º–∏—Å—Å–∏—è: <b>1000‚ÇΩ</b>\n'
                                            f'üìä –ö—É—Ä—Å: <b>{cours}</b>',
                                       parse_mode='HTML',
                                       reply_markup=ikb_home_order())
        await state.clear()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')

@dp.message(Command('admin'), StateFilter('*'))
async def admin(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.username == 'nmnn96' or message.from_user.username == 'lottematte':
        await message.answer(text='–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:',
                         reply_markup=ikb_admin())
    else:
        return


@dp.callback_query(F.data == 'change_pay')
async def change_pay(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                  reply_markup=ikb_change_or_add())


@dp.callback_query(F.data == 'add_propts')
async def add_propts(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(text='–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞')
    await state.set_state(Client.number_propt)


@dp.message(StateFilter(Client.number_propt))
async def add_number_propt(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(number_propt=message.text)
        await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –±–∞–Ω–∫\n\n(–¢–æ, —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞–ø–∏—à–µ—à—å, –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö —É –∫–ª–∏–µ–Ω—Ç–∞)')
        await state.set_state(Client.bank_propt)
    else:
        await message.answer('–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –Ω–æ–º–µ—Ä)')


@dp.message(StateFilter(Client.bank_propt))
async def add_bank_propt(message: Message, state: FSMContext):
    info = await state.get_data()
    await add_propt([message.text, info.get('number_propt')])
    await message.answer('–î–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!')
    await state.clear()


@dp.callback_query(F.data == 'change_propts')
async def change_propts(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏ –∫–∞–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å–µ–π—á–∞—Å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ:',
                                  reply_markup=ikb_propts())


@dp.callback_query(F.data.startswith("select_acc_"))
async def handle_select_account(callback: CallbackQuery):
    await update_current_propts_id(callback.data.split('_')[-1])
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer('–û–±–Ω–æ–≤–∏–ª –ø–ª–∞—Ç—ë–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')


@dp.callback_query(F.data == 'change_cours')
async def change_cours_bd(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É:')
    await state.set_state(Client.cours)


@dp.message(StateFilter(Client.cours))
async def course_change(message: Message, state: FSMContext):
    try:
        n = float(message.text)
        if not n.is_integer() or '.0' in str(n):
            await change_cours(n)
            await message.answer(f'–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n'
                                 f'–ù–æ–≤—ã–π –∫—É—Ä—Å: {get_cours()[0]}',
                                 reply_markup=ikb_come_home())
            await state.clear()
        else:
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
    except ValueError:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@dp.callback_query(F.data == 'where_link')
async def where_link(callback: CallbackQuery):
    await callback.answer()
    file1 = FSInputFile('media/link_1.jpg')
    file2 = FSInputFile('media/link_2.jpg')
    photos = [
        InputMediaPhoto(media=file1, caption=where_link_text, parse_mode='HTML'),
        InputMediaPhoto(media=file2)
    ]
    await bot.send_media_group(chat_id=callback.message.chat.id,
                               media=photos)


if __name__ == '__main__':
    print('Work Work')
    dp.run_polling(bot, skip_updates=True)