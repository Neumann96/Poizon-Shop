from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
from keyboards import *
from sql_query import *
from dotenv import load_dotenv
import os

load_dotenv()
token = os.getenv('token_test')
proxy_url = os.getenv('proxy_url')

storage = MemoryStorage()
bot = Bot(token=token, proxy=proxy_url)
dp = Dispatcher(storage=storage)

start_message = '''
üòâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥—Ä—É–ø–ø—ã <u>logistic by pumba</u>!</b>

üõç –ú—ã –ø–æ–º–æ–≥–∞–µ–º <b>–≤—ã–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å –∫–∏—Ç–∞–π—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∫–∏ <u>POIZON (DEWU)</u></b>.

‚õîÔ∏è <b>–í—Å–µ —Ä–∞—Å—á—ë—Ç—ã, –∑–∞–∫–∞–∑—ã –∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è <u>—Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ</u>.</b>  
<i>–û–ø–ª–∞—Ç–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö ‚Äî –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è!</i>

‚ö†Ô∏è <b>–í–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É —Ç–æ–≤–∞—Ä <u>–Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç</u>.</b>  
<i>–ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ª—É–≥–∏ –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏.</i>
'''

name = ''


class Client(StatesGroup):
    calc_price = State()
    cours = State()


@dp.message(Command("start"), StateFilter(None))
async def start_command(message: Message, state: FSMContext):
    photo = FSInputFile("pumba_pic.jpg")
    try:
        await bot.send_photo(chat_id=message.chat.id,
                             photo=photo,
                             caption=f'{start_message}',
                             parse_mode='HTML',
                             reply_markup=get_ikb_start())
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ /start: {e.__class__.__name__}: {e}')


@dp.callback_query(StateFilter('*'), F.data == 'home')
async def calc_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    photo = FSInputFile("pumba_pic.jpg")
    await bot.send_photo(chat_id=callback.message.chat.id,
                         photo=photo,
                         caption=f'{start_message}',
                         parse_mode='HTML',
                         reply_markup=get_ikb_start())


@dp.callback_query(F.data == 'make_order')
async def quest(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–ê –∑–¥–µ—Å—å —Å–¥–µ–ª–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞!',
                                  reply_markup=ikb_come_home())


@dp.callback_query(F.data == 'often_quest')
async def quest(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('‚ùì–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç —É–∂–µ –∂–¥—ë—Ç –≤–∞—Å –∑–¥–µ—Å—å.',
                                  reply_markup=ikb_often_question())


@dp.callback_query(F.data == 'time_delivery')
async def quest(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 3 –¥–æ 5 –Ω–µ–¥–µ–ª—å —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞ '
                                  '–Ω–∞ —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ. –°—Ä–æ–∫ –º–æ–∂–µ—Ç –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞.',
                                  reply_markup=ikb_come_quest())


@dp.callback_query(F.data == 'trans_comp')
async def quest(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–ü–æ –†–æ—Å—Å–∏–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ü–æ—á—Ç—É –†–æ—Å—Å–∏–∏.',
                                  reply_markup=ikb_come_quest())


@dp.callback_query(F.data == 'track_order')
async def quest(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ '
                                  '–†–æ—Å—Å–∏–∏, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ SMS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.',
                                  reply_markup=ikb_come_quest())


@dp.callback_query(F.data == 'calc')
async def calc_price(callback: CallbackQuery):
    await callback.message.delete()
    await callback.bot.send_message(chat_id=callback.from_user.id,
                                    text='üìä –í –Ω–∞—à–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ –†–æ—Å—Å–∏–∏.\n\n'
                                         'üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª:',
                                    reply_markup=get_ikb_kat())
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("calc_"))
async def res_calc(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    global name
    name = callback.data
    await callback.bot.send_message(chat_id=callback.from_user.id,
                                    text='–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:')
    await state.set_state(Client.calc_price)


@dp.message(StateFilter(Client.calc_price))
async def res_calc2(message: Message, state: FSMContext):
    global name
    if message.text.isdigit():
        price = int(message.text)
        cours = get_cours()[0]
        comission = get_price_comission(name[5:])[0]
        res = price * cours + 1000 + comission
        await message.bot.send_message(chat_id=message.from_user.id,
                                       text=f'üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ <b>{res} —Ä—É–±–ª–µ–π</b>\n\n'
                                            f'–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: <b>1000 —Ä—É–±–ª–µ–π</b> (—É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å)\n\n'
                                            f'–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: <b>{comission} —Ä—É–±–ª–µ–π</b>\n\n'
                                            f'üìä –ö—É—Ä—Å —é–∞–Ω—è: <b>{cours}</b>',
                                       parse_mode='HTML',
                                       reply_markup=ikb_home_order())
        await state.clear()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@dp.message(Command('admin'))
async def admin(message: Message, state: FSMContext):
    if message.from_user.username == 'nmnn96' or message.from_user.username == 'lottematte':
        await message.answer('–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É:')
        await state.set_state(Client.cours)
    else:
        return


@dp.message(StateFilter(Client.cours))
async def admin(message: Message, state: FSMContext):
    try:
        n = float(message.text)
        if not n.is_integer():
            change_cours(n)
            await message.answer(f'–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n'
                                 f'–ù–æ–≤—ã–π –∫—É—Ä—Å: {get_cours()[0]}')
            await state.clear()
        else:
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ')
    except ValueError:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ')


if __name__ == '__main__':
    print('Work Work')
    dp.run_polling(bot, skip_updates=True)