from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, Document
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile

from texts import *
import re

from keyboards import *
from sql_query import *
from dotenv import load_dotenv
import os

load_dotenv()
token = os.getenv('token_test')
proxy_url = os.getenv('proxy_url')

storage = MemoryStorage()
bot = Bot(token=token, proxy=proxy_url)
dp = Dispatcher(storage=storage)

name = ''
basket = {}

class Client(StatesGroup):
    calc_price = State()
    cours = State()
    waiting_new_price = State()
    order_kat = State()
    picture = State()
    link = State()
    size = State()
    price = State()
    result = State()
    done = State()
    mail = State()
    number_propt = State()
    bank_propt = State()
    check = State()
    recipient_propt = State()
    delivery = State()


@dp.message(Command("start"), StateFilter('*'))
async def start_command(message: Message, state: FSMContext):
    photo = FSInputFile("media/pumba_pic.jpg")
    await state.clear()
    try:
        await bot.send_photo(chat_id=message.chat.id,
                             photo=photo,
                             caption=f'{start_message}',
                             parse_mode='HTML',
                             reply_markup=get_ikb_start())
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ /start: {e.__class__.__name__}: {e}')


@dp.callback_query(StateFilter('*'), F.data == 'home')
async def come_home(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    await state.clear()
    photo = FSInputFile("media/pumba_pic.jpg")
    await bot.send_photo(chat_id=callback.message.chat.id,
                         photo=photo,
                         caption=f'{start_message}',
                         parse_mode='HTML',
                         reply_markup=get_ikb_start())


@dp.callback_query(F.data == 'make_order')
async def make_order(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    await callback.message.answer(calc_text,
                                  reply_markup=get_ikb_kat())
    await state.set_state(Client.order_kat)


@dp.callback_query(F.data == 'instructions')
async def instructions(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
                                  reply_markup=ikb_instruction())


@dp.callback_query(F.data == 'log_acc')
async def log_acc(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    file1 = FSInputFile('media/log_acc_1.jpg')
    file2 = FSInputFile('media/log_acc_2.jpg')
    file3 = FSInputFile('media/log_acc_3.jpg')
    file4 = FSInputFile('media/log_acc_4.jpg')
    photos = [
        InputMediaPhoto(media=file1, caption=log_acc_text, parse_mode='HTML'),
        InputMediaPhoto(media=file2),
        InputMediaPhoto(media=file3),
        InputMediaPhoto(media=file4)
    ]
    await bot.send_media_group(chat_id=callback.message.chat.id,
                               media=photos)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
                                  reply_markup=ikb_instruction())


@dp.callback_query(F.data == 'guide')
async def quide(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    file1 = FSInputFile('media/guide_1.jpg')
    file2 = FSInputFile('media/guide_2.jpg')
    file3 = FSInputFile('media/guide_3.jpg')
    file4 = FSInputFile('media/guide_4.jpg')
    file5 = FSInputFile('media/guide_5.jpg')
    photos = [
        InputMediaPhoto(media=file1, caption=guide_text, parse_mode='HTML'),
        InputMediaPhoto(media=file2),
        InputMediaPhoto(media=file3),
        InputMediaPhoto(media=file4),
        InputMediaPhoto(media=file5)
    ]
    await bot.send_media_group(chat_id=callback.message.chat.id,
                               media=photos)
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
                                  reply_markup=ikb_instruction())


@dp.callback_query(lambda c: c.data.startswith("calc_"), StateFilter(Client.order_kat))
async def order_kat(callback: CallbackQuery, state: FSMContext):
    photo = FSInputFile("media/example.PNG")
    global basket
    await state.update_data(kat=callback.data[5:])
    basket["kat"] = callback.data[5:]
    await callback.message.delete()
    await callback.bot.send_photo(chat_id=callback.message.chat.id,
                                  photo=photo,
                                  caption=f'üñºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ',
                                  parse_mode='HTML',
                                  reply_markup=ikb_come_home())
    await callback.answer()
    await state.set_state(Client.picture)


@dp.message(StateFilter(Client.picture))
async def picture(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.",)
        return
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(photo_id=file_id)
    global basket
    basket["photo_id"] = file_id
    await message.answer(text="<b>üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä</b>",
                         reply_markup=ikb_where_link(),
                         parse_mode="HTML")
    await state.set_state(Client.link)


@dp.message(StateFilter(Client.link))
async def link(message: Message, state: FSMContext):
    if 'https://dw4.co' in message.text:
        match = re.search(r'https?://\S+', message.text)
        await state.update_data(link=match.group())
        global basket
        basket["link"] = match.group()
        await message.answer(text=size_text,
                             parse_mode='HTML',
                             reply_markup=ikb_close_size())
        await state.set_state(Client.size)
    else:
        await message.answer('–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª–π—É—Å—Ç–∞, —Å—Å—ã–ª–∫—É!')


@dp.callback_query(StateFilter(Client.size) and F.data == 'close_size')
async def size(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–†–∞–∑–º–µ—Ä–∞ —É –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç')
    await state.update_data(size='-')
    global basket
    basket["size"] = '-'
    await callback.message.answer(text='‚ùï–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –Æ–∞–Ω—è—Ö:',
                         parse_mode='HTML',
                         reply_markup=ikb_come_home())
    await state.set_state(Client.price)


@dp.message(StateFilter(Client.size))
async def size(message: Message, state: FSMContext):
    await state.update_data(size=message.text)
    global basket
    basket["size"] = message.text
    await message.answer(text='‚ùï–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –Æ–∞–Ω—è—Ö:',
                         parse_mode='HTML',
                         reply_markup=ikb_come_home())
    await state.set_state(Client.price)


@dp.message(StateFilter(Client.price))
async def delivery(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(price=message.text)
        global basket
        basket["price"] = message.text
        await message.answer(text='üöö –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:',
                                      reply_markup=ikb_choose_delivery())
        await state.set_state(Client.delivery)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å!')


async def send_album(bot, chat_id: int, file_ids: list[str]):
    media = [InputMediaPhoto(media=file_id) for file_id in file_ids]
    await bot.send_media_group(chat_id=chat_id, media=media)


@dp.callback_query(StateFilter(Client.delivery))
async def price(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_basket = {
        "kat": data.get("kat"),
        "photo_id": data.get("photo_id"),
        "link": data.get("link"),
        "size": data.get("size"),
        "price": data.get("price"),
        "delivery": callback.data
    }

    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ basket
    basket_list = data.get("basket", [])
    basket_list.append(current_basket)
    await state.update_data(basket=basket_list)

    await callback.answer()
    price = int(current_basket["price"])
    # —Å—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    cours = get_cours()[0]
    total_price = 0
    for item in basket_list:
        item_price = int(item["price"])
        comission_data = get_price_comission(item["kat"])[0]
        comission = comission_data[0]
        fast_comiss = comission_data[2]

        # –µ—Å–ª–∏ 3 –∏–ª–∏ –±–æ–ª–µ–µ —Ç–æ–≤–∞—Ä–æ–≤, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ 750, –∏–Ω–∞—á–µ 1000
        fixed_fee = 750 if len(basket_list) >= 3 else 1000

        if item["delivery"] == 'fast':
            res = int(item_price * cours + fixed_fee + fast_comiss)
        else:
            res = int(item_price * cours + fixed_fee + comission)

        item['res_rub'] = res
        total_price += res

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    caption = ""
    for i in basket_list:
        caption += (f'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {i["link"]}\n'
                    f'üß© –†–∞–∑–º–µ—Ä: {i["size"]}\n'
                    f'üí¥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –Æ–∞–Ω—è—Ö: {i["price"]}¬•\n'
                    f'üí≥ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {i["res_rub"]}‚ÇΩ\n\n')

    caption += (f'üöö –í–∏–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {"–ë—ã—Å—Ç—Ä–∞—è" if basket_list[-1]["delivery"] == "fast" else "–û–±—ã—á–Ω–∞—è"}\n'
                f'üí≥ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {total_price}‚ÇΩ\n\n'
                f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö!')

    file_ids = [i["photo_id"] for i in basket_list if "photo_id" in i]
    if len(file_ids) > 1:
        await send_album(callback.bot, callback.message.chat.id, file_ids)
        await callback.message.answer(caption,
                                      disable_web_page_preview=True,
                                      reply_markup=ikb_done(),
                                      parse_mode='HTML')
    else:
        await callback.bot.send_photo(chat_id=callback.message.chat.id,
                                      caption=caption,
                                      photo=file_ids[0],
                                      parse_mode='HTML',
                                      reply_markup=ikb_done())

    # **–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è**
    for key in ["kat", "photo_id", "link", "size", "price", "delivery"]:
        data.pop(key, None)
    await state.update_data(**data)

    # –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await state.set_state(Client.order_kat)


@dp.callback_query(F.data == 'add_product')
async def add_product(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∑–∞–∫–∞–∑–∞
    for field in ["kat", "photo_id", "link", "size", "price", "delivery"]:
        if field in data:
            data.pop(field)

    await state.update_data(**data)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º basket –∫–∞–∫ –µ—Å—Ç—å

    await callback.answer()
    await callback.message.answer(
        calc_text,
        reply_markup=get_ikb_kat()
    )
    await state.set_state(Client.order_kat)




@dp.callback_query(F.data == 'done_order')
async def send_mail_info(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(mail_text,
                                  reply_markup=ikb_come_home())
    await state.set_state(Client.mail)


@dp.message(StateFilter(Client.mail))
async def result(message: Message, state: FSMContext):
    if message.text.count('\n') >= 2:
        await message.answer(
            f'<b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!</b>\n\n'
            f'–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã!\n'
            f'(–ö—É—Ä—Å –º–æ–∂–µ—Ç –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)',
            reply_markup=ikb_come_home(),
            parse_mode='HTML'
        )

        data = await state.get_data()
        basket_list = data.get("basket", [])

        # —Å—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        cours = get_cours()[0]
        total_price = 0
        for item in basket_list:
            item_price = int(item["price"])
            comission_data = get_price_comission(item["kat"])[0]
            comission = comission_data[0]
            fast_comiss = comission_data[2]

            # –µ—Å–ª–∏ 3 –∏–ª–∏ –±–æ–ª–µ–µ —Ç–æ–≤–∞—Ä–æ–≤, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ 750, –∏–Ω–∞—á–µ 1000
            fixed_fee = 750 if len(basket_list) >= 3 else 1000

            if item["delivery"] == 'fast':
                res = int(item_price * cours + fixed_fee + fast_comiss)
            else:
                res = int(item_price * cours + fixed_fee + comission)

            item['res_rub'] = res
            total_price += res

        caption = ""
        for i in basket_list:
            caption += (f'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {i["link"]}\n'
                        f'üß© –†–∞–∑–º–µ—Ä: {i["size"]}\n'
                        f'üí¥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –Æ–∞–Ω—è—Ö: {i["price"]}¬•\n'
                        f'üí≥ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {i["res_rub"]}‚ÇΩ\n\n')

        caption += (f'üöö –í–∏–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {"–ë—ã—Å—Ç—Ä–∞—è" if basket_list[-1]["delivery"] == "fast" else "–û–±—ã—á–Ω–∞—è"}\n\n'
                    f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:\n{message.text}\n\n'
                    f'–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total_price}</b>‚ÇΩ')
        order_id = await add_order([message.from_user.id, message.from_user.username, res, total_price, comission, 0])

        file_ids = [i["photo_id"] for i in basket_list if "photo_id" in i]

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in [1006103801, 6773782194]:
            if len(file_ids) > 1:
                await send_album(bot, admin_id, file_ids)
                await bot.send_message(
                    chat_id=admin_id,
                    text=caption,
                    disable_web_page_preview=True,
                    reply_markup=ikb_sign(order_id, total_price),
                    parse_mode='HTML'
                )
            else:
                await bot.send_photo(
                    chat_id=admin_id,
                    caption=caption,
                    photo=file_ids[0],
                    reply_markup=ikb_sign(order_id, total_price),
                    parse_mode='HTML'
                )

        # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    else:
        await message.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')



@dp.callback_query(lambda c: c.data.startswith("id_"))
async def order_kat(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_info = await get_order_by_id(callback.data.split("_")[1])
    if len(callback.data.split("_")) == 3:
        res = int(callback.data.split("_")[2])
    else:
        price_y = user_info[4]
        comission = user_info[5]
        cours = get_cours()[0]
        res = int(price_y * cours + comission + 1000 - user_info[6])
    id = await get_current_propts_id()
    data = await get_payment_data_by_id(id)
    await callback.message.answer(f'–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n'
                                  f'‚Äçüôé‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç: @{user_info[2]}\n'
                                  f'üí∏ –°—É–º–º–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è —É –∫–ª–∏–µ–Ω—Ç–∞: {user_info[4]}‚ÇΩ\n'
                                  f'üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {user_info[4]}‚ÇΩ')
    await bot.send_message(chat_id=int(user_info[1]),
                           text='üö® –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞, –±—É–¥—å—Ç–µ –ø—Ä–µ–¥–µ–ª—å–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –æ–ø–ª–∞—Ç—ã, —Å–≤–µ—Ä—è–π—Ç–µ –°–£–ú–ú–£, –ò–ú–Ø –∏ –ë–ê–ù–ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è!')
    await bot.send_message(chat_id=int(user_info[1]),
                           text=f'‚úÖ <b>–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</b>\n\n'
                                f'–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n'
                                f'<code>üì≤ {data[1]}</code>\n'
                                f'üè¶ {data[0]}\n'
                                f'üë§ {data[3]}\n\n'
                                f'–ö –æ–ø–ª–∞—Ç–µ: <b>{user_info[4]}‚ÇΩ</b>\n\n'
                                f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\n'
                                f'(–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ –¥—Ä—É–≥–∏–µ –º–µ–Ω—é –±–æ—Ç–∞, –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —á–µ–∫. '
                                f'–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –°–ø–∞—Å–∏–±–æ!)',
                           parse_mode='HTML')
    fsm_context = FSMContext(storage=storage, key=StorageKey(
        chat_id=int(user_info[1]),
        user_id=int(user_info[1]),
        bot_id=bot.id
    ))
    await fsm_context.update_data(user=user_info[2], sum=user_info[4])
    await fsm_context.set_state(Client.check)


@dp.callback_query(F.data.startswith("change_id_"))
async def process_change_price(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        _, _, order_id, old_price = callback.data.split("_")
    except ValueError:
        # –µ—Å–ª–∏ –≤ callback –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–Ω—ã (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç), –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º 0
        _, order_id = callback.data.split("_")
        old_price = "0"

    await state.update_data(order_id=order_id)
    await callback.message.answer(
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {old_price} ‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:"
    )
    await state.set_state(Client.waiting_new_price)


# ------------------ –•–µ–Ω–¥–ª–µ—Ä: –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã ------------------
@dp.message(Client.waiting_new_price)
async def save_new_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return

    new_price = int(message.text)
    data = await state.get_data()
    order_id = data["order_id"]

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer(
        f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} ‚ÇΩ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        reply_markup=ikb_sign(order_id, new_price)
    )
    data = await state.get_data()
    await state.clear()


@dp.message(StateFilter(Client.check))
async def check(message: Message, state: FSMContext):
    if message.document:
        document: Document = message.document
        file_id = document.file_id
        data = await state.get_data()
        await bot.send_document(chat_id=1006103801,
                                document=file_id,
                                caption=f'‚Äçüôé‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç: @{data.get("user")}\n'
                                        f'üí∏ –°—É–º–º–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è —É –∫–ª–∏–µ–Ω—Ç–∞: {data.get("sum")}‚ÇΩ')
        await bot.send_document(chat_id=6773782194,
                                document=file_id,
                                caption=f'‚Äçüôé‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç: @{data.get("user")}\n'
                                        f'üí∏ –°—É–º–º–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è —É –∫–ª–∏–µ–Ω—Ç–∞: {data.get("sum")}‚ÇΩ')
        await message.answer("–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
                             reply_markup=ikb_come_home())
        await state.clear()
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, PDF-—Ñ–∞–π–ª —Å —á–µ–∫–æ–º.")


@dp.callback_query(F.data == 'often_quest')
async def quest(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç —É–∂–µ –∂–¥—ë—Ç –≤–∞—Å –∑–¥–µ—Å—å.',
                                  reply_markup=ikb_often_question())


@dp.callback_query(F.data == 'time_delivery')
async def quest_1(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–û–±—ã—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 3 –Ω–µ–¥–µ–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ. '
                                  '–°—Ä–æ–∫ –º–æ–∂–µ—Ç –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞.\n\n'
                                  '‚ùï–ê–≤–∏–∞-–¥–æ—Å—Ç–∞–≤–∫–∞ (–ë—ã—Å—Ç—Ä–∞—è) –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 2 –¥–æ 7 –¥–Ω–µ–π –¥–æ –ú–æ—Å–∫–≤—ã —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ.',
                                  reply_markup=ikb_come_quest())


@dp.callback_query(F.data == 'trans_comp')
async def quest_2(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–ü–æ –†–æ—Å—Å–∏–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–∞–Ω–∏—é CDEK.',
                                  reply_markup=ikb_come_quest())


@dp.callback_query(F.data == 'track_order')
async def quest_3(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –†–æ—Å—Å–∏–∏, '
                                  '–≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ CDEK –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –Ω—É–∂–Ω–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.',
                                  reply_markup=ikb_come_quest())


@dp.callback_query(F.data == 'calc')
async def calc_price(callback: CallbackQuery):
    await callback.message.delete()
    await callback.bot.send_message(chat_id=callback.from_user.id,
                                    text=calc_text,
                                    reply_markup=get_ikb_kat())
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("calc_"))
async def res_calc(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    global name
    name = callback.data
    await callback.bot.send_message(chat_id=callback.from_user.id,
                                    text='–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö:')
    await state.set_state(Client.calc_price)


@dp.message(StateFilter(Client.calc_price))
async def res_calc2(message: Message, state: FSMContext):
    global name
    if message.text.isdigit():
        price = int(message.text)
        cours = get_cours()[0]
        comission = get_price_comission(name[5:])[0][0]
        res = int(price * cours + 1000 + comission)
        await message.bot.send_message(chat_id=message.from_user.id,
                                       text=f'üí≥ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: <b>{res} —Ä—É–±–ª–µ–π</b>\n\n'
                                            f'üöö –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{comission} —Ä—É–±–ª–µ–π</b>\n'
                                            f'üí∏ –ö–æ–º–∏—Å—Å–∏—è: <b>1000‚ÇΩ</b>\n'
                                            f'üìä –ö—É—Ä—Å: <b>{cours}</b>',
                                       parse_mode='HTML',
                                       reply_markup=ikb_home_order())
        await state.clear()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')

@dp.message(Command('admin'), StateFilter('*'))
async def admin(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id == 1006103801 or message.from_user.id == 6773782194:
        await message.answer(text='–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:',
                         reply_markup=ikb_admin())
    else:
        return


@dp.callback_query(F.data == 'change_pay')
async def change_pay(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                  reply_markup=ikb_change_or_add())


@dp.callback_query(F.data == 'add_propts')
async def add_propts(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(text='–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞')
    await state.set_state(Client.number_propt)


@dp.message(StateFilter(Client.number_propt))
async def add_number_propt(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(number_propt=message.text)
        await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –±–∞–Ω–∫\n\n(–¢–æ, —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞–ø–∏—à–µ—à—å, –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö —É –∫–ª–∏–µ–Ω—Ç–∞)')
        await state.set_state(Client.recipient_propt)
    else:
        await message.answer('–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –Ω–æ–º–µ—Ä)')


@dp.message(StateFilter(Client.recipient_propt))
async def add_number_propt(message: Message, state: FSMContext):
    await state.update_data(bank_propt=message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ö–∞–∫ –Ω–∞–ø–∏—à–µ—à—å, —Ç–∞–∫ –∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –∫–ª–∏–µ–Ω—Ç–∞)')
    await state.set_state(Client.bank_propt)


@dp.message(StateFilter(Client.bank_propt))
async def add_bank_propt(message: Message, state: FSMContext):
    info = await state.get_data()
    await add_propt([info.get('bank_propt'), info.get('number_propt'), message.text])
    await message.answer('–î–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!')
    await state.clear()


@dp.callback_query(F.data == 'change_propts')
async def change_propts(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏ –∫–∞–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å–µ–π—á–∞—Å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ:',
                                  reply_markup=ikb_propts())


@dp.callback_query(F.data.startswith("select_acc_"))
async def handle_select_account(callback: CallbackQuery):
    await update_current_propts_id(callback.data.split('_')[-1])
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer('–û–±–Ω–æ–≤–∏–ª –ø–ª–∞—Ç—ë–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')


@dp.callback_query(F.data == 'change_cours')
async def change_cours_bd(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É:')
    await state.set_state(Client.cours)


@dp.message(StateFilter(Client.cours))
async def course_change(message: Message, state: FSMContext):
    try:
        n = float(message.text)
        if not n.is_integer() or '.0' in str(n):
            await change_cours(n)
            await message.answer(f'–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n\n'
                                 f'–ù–æ–≤—ã–π –∫—É—Ä—Å: {get_cours()[0]}',
                                 reply_markup=ikb_come_home())
            await state.clear()
        else:
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
    except ValueError:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')


@dp.callback_query(F.data == 'where_link')
async def where_link(callback: CallbackQuery):
    await callback.answer()
    file1 = FSInputFile('media/link_1.jpg')
    file2 = FSInputFile('media/link_2.jpg')
    photos = [
        InputMediaPhoto(media=file1, caption=where_link_text, parse_mode='HTML'),
        InputMediaPhoto(media=file2)
    ]
    await bot.send_media_group(chat_id=callback.message.chat.id,
                               media=photos)


if __name__ == '__main__':
    print('Work Work')
    dp.run_polling(bot, skip_updates=True)